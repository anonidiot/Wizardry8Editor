diff -Naur Urho3D-1.8/Source/Urho3D/Engine/Engine.cpp o/Urho3D-1.8/Source/Urho3D/Engine/Engine.cpp
--- Urho3D-1.8/Source/Urho3D/Engine/Engine.cpp	2022-01-24 10:41:12.000000000 +1100
+++ Urho3D-1.8/Source/Urho3D/Engine/Engine.cpp	2022-04-05 14:47:53.233405351 +1000
@@ -358,6 +358,16 @@
             unsigned j = 0;
             for (; j < resourcePrefixPaths.Size(); ++j)
             {
+              // Make an exception for QT resource files - we don't expect to be able to
+              // find these in the filesystem, so just add them immediately.
+              if (resourcePaths[i].StartsWith(":/"))
+              {
+                  // Just expect all the QT res pak files to have the explicit .pak extension
+                  if (cache->AddPackageFile(resourcePaths[i]))
+                      break;
+              }
+              else
+              {
                 String packageName = resourcePrefixPaths[j] + resourcePaths[i] + ".pak";
                 if (fileSystem->FileExists(packageName))
                 {
@@ -374,6 +384,7 @@
                     else
                         return false;
                 }
+              }
             }
             if (j == resourcePrefixPaths.Size())
             {
diff -Naur Urho3D-1.8/Source/Urho3D/IO/File.cpp o/Urho3D-1.8/Source/Urho3D/IO/File.cpp
--- Urho3D-1.8/Source/Urho3D/IO/File.cpp	2022-01-24 10:41:12.000000000 +1100
+++ Urho3D-1.8/Source/Urho3D/IO/File.cpp	2022-04-05 14:53:40.843139732 +1000
@@ -59,6 +59,28 @@
 };
 #endif
 
+/* Anonymous Idiot change */
+// I *hate* Urho3D's reliance on the CoreData and Data folders outside
+// of the application.
+// Rather than do that I want it to read a pak file for its CoreData
+// from a QT resource instead. The easiest way of doing this is to change
+// either this class or the PackageFile class to use QFile functions, and
+// contaminate Urho3D with QT dependencies.
+// But I hate that too. Fussy I know.
+// So creating a static API call that can be used to register some callbacks
+// which can do the same thing that way without creating dependencies. I only
+// need a single external filesystem, so not implementing this as a Vector or
+// anything more extensible.
+// Technically we could use this for ALL file access, since the QFile should
+// work fine for that too, but concerned it could have a performance hit. And
+// I've crippled the write functionality when using QFile for paranoid reasons.
+struct external_file_ops extFile = { 0 };
+
+void File::RegisterExternalFileType( struct external_file_ops& cmds )
+{
+    extFile = cmds;
+}
+
 #ifdef __ANDROID__
 const char* APK = "/apk/";
 static const unsigned READ_BUFFER_SIZE = 32768;
@@ -69,6 +91,7 @@
     Object(context),
     mode_(FILE_READ),
     handle_(nullptr),
+    isExternal_(false),
 #ifdef __ANDROID__
     assetHandle_(0),
 #endif
@@ -86,6 +109,7 @@
     Object(context),
     mode_(FILE_READ),
     handle_(nullptr),
+    isExternal_(false),
 #ifdef __ANDROID__
     assetHandle_(0),
 #endif
@@ -104,6 +128,7 @@
     Object(context),
     mode_(FILE_READ),
     handle_(nullptr),
+    isExternal_(false),
 #ifdef __ANDROID__
     assetHandle_(0),
 #endif
@@ -332,16 +357,32 @@
     // Need to reassign the position due to internal buffering when transitioning from reading to writing
     if (writeSyncNeeded_)
     {
-        fseek((FILE*)handle_, (long)position_ + offset_, SEEK_SET);
+        if (isExternal_)
+            extFile._seek(handle_, (long)position_ + offset_, SEEK_SET);
+        else
+            fseek((FILE*)handle_, (long)position_ + offset_, SEEK_SET);
         writeSyncNeeded_ = false;
     }
 
-    if (fwrite(data, size, 1, (FILE*)handle_) != 1)
+    if (isExternal_)
     {
-        // Return to the position where the write began
-        fseek((FILE*)handle_, (long)position_ + offset_, SEEK_SET);
-        URHO3D_LOGERROR("Error while writing to file " + GetName());
-        return 0;
+        if (extFile._write(data, size, 1, handle_) != 1)
+        {
+            // Return to the position where the write began
+            extFile._seek(handle_, (long)position_ + offset_, SEEK_SET);
+            URHO3D_LOGERROR("Error while writing to file " + GetName());
+            return 0;
+        }
+    }
+    else
+    {
+        if (fwrite(data, size, 1, (FILE*)handle_) != 1)
+        {
+            // Return to the position where the write began
+            fseek((FILE*)handle_, (long)position_ + offset_, SEEK_SET);
+            URHO3D_LOGERROR("Error while writing to file " + GetName());
+            return 0;
+        }
     }
 
     readSyncNeeded_ = true;
@@ -396,7 +437,10 @@
 
     if (handle_)
     {
-        fclose((FILE*)handle_);
+        if (isExternal_)
+            extFile._close(handle_);
+        else
+            fclose((FILE*)handle_);
         handle_ = nullptr;
         position_ = 0;
         size_ = 0;
@@ -408,7 +452,12 @@
 void File::Flush()
 {
     if (handle_)
-        fflush((FILE*)handle_);
+    {
+        if (isExternal_)
+            extFile._flush(handle_);
+        else
+            fflush((FILE*)handle_);
+    }
 }
 
 bool File::IsOpen() const
@@ -472,6 +521,13 @@
     }
 #endif
 
+   if (extFile._open && (fileName.StartsWith( extFile._filePrefix, false )))
+   {
+       handle_ = extFile._open( fileName.CString(), mode );
+       isExternal_ = true;
+   }
+   else
+   {
 #ifdef _WIN32
     handle_ = _wfopen(GetWideNativePath(fileName).CString(), openMode[mode]);
 #else
@@ -487,6 +543,7 @@
         handle_ = fopen(GetNativePath(fileName).CString(), openMode[mode + 1]);
 #endif
     }
+   }
 
     if (!handle_)
     {
@@ -496,9 +553,18 @@
 
     if (!fromPackage)
     {
-        fseek((FILE*)handle_, 0, SEEK_END);
-        long size = ftell((FILE*)handle_);
-        fseek((FILE*)handle_, 0, SEEK_SET);
+        long size;
+
+        if (isExternal_)
+        {
+            size = extFile._size(handle_);
+        }
+        else
+        {
+            fseek((FILE*)handle_, 0, SEEK_END);
+            size = ftell((FILE*)handle_);
+            fseek((FILE*)handle_, 0, SEEK_SET);
+        }
         if (size > M_MAX_UNSIGNED)
         {
             URHO3D_LOGERRORF("Could not open file %s which is larger than 4GB", fileName.CString());
@@ -527,7 +593,10 @@
     }
     else
 #endif
-        return fread(dest, size, 1, (FILE*)handle_) == 1;
+        if (isExternal_)
+            return extFile._read(dest, size, 1, handle_) == 1;
+        else
+            return fread(dest, size, 1, (FILE*)handle_) == 1;
 }
 
 void File::SeekInternal(unsigned newPosition)
@@ -542,7 +611,10 @@
     }
     else
 #endif
-        fseek((FILE*)handle_, newPosition, SEEK_SET);
+        if (isExternal_)
+            extFile._seek(handle_, newPosition, SEEK_SET);
+        else
+            fseek((FILE*)handle_, newPosition, SEEK_SET);
 }
 
 }
diff -Naur Urho3D-1.8/Source/Urho3D/IO/File.h o/Urho3D-1.8/Source/Urho3D/IO/File.h
--- Urho3D-1.8/Source/Urho3D/IO/File.h	2022-01-24 10:41:12.000000000 +1100
+++ Urho3D-1.8/Source/Urho3D/IO/File.h	2022-04-05 14:48:26.073571604 +1000
@@ -56,6 +56,19 @@
     FILE_READWRITE
 };
 
+struct external_file_ops
+{
+    char     _filePrefix[10];
+    void    *(*_open)(const char *pathname, FileMode mode);
+    int      (*_close)(void *handle);
+    int      (*_size)(void *handle);
+    int      (*_flush)(void *handle);
+    int      (*_seek)(void *handle, long offset, int whence);
+    long     (*_tell)(void *handle);
+    size_t   (*_read)(void *ptr, size_t size, size_t nmemb, void *handle);
+    size_t   (*_write)(const void *ptr, size_t size, size_t nmemb, void *handle);
+};
+
 class PackageFile;
 
 /// %File opened either through the filesystem or from within a package file.
@@ -107,6 +120,8 @@
     /// @property
     bool IsPackaged() const { return offset_ != 0; }
 
+    static void RegisterExternalFileType( struct external_file_ops& cmds );
+
 private:
     /// Open file internally using either C standard IO functions or SDL RWops for Android asset files. Return true if successful.
     bool OpenInternal(const String& fileName, FileMode mode, bool fromPackage = false);
@@ -119,6 +134,8 @@
     FileMode mode_;
     /// File handle.
     void* handle_;
+    /// if true handle_ is and external class, if false, it is a FILE *
+    bool  isExternal_;
 #ifdef __ANDROID__
     /// SDL RWops context for Android asset loading.
     SDL_RWops* assetHandle_;
